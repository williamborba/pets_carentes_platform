services:
    database_queue:
        image: redis:7
        ports:
            - ${DATABASE_QUEUE_PORT}:6379
        command: redis-server --requirepass ${DATABASE_QUEUE_PASSWORD}
        networks:
            - pc_network
    database_nosql:
        image: mongo:6
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${DATABASE_PRIMARY_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PRIMARY_PASSWORD}
        ports:
            - ${DATABASE_PRIMARY_PORT}:27017
        volumes:
            - ./container/mongo/data:/data/db
        networks:
            - pc_network
    app_api:
        build: ./container/python/
        volumes:
            - ./app_api/:/project/app_api/
        command: ${APP_API_COMMAND}
        networks:
            - pc_network
    # appweb:
    #     build: ./container/python/
    #     volumes:
    #         - ./appWeb/:/project/
    #     command: 'gunicorn --chdir ${WEB_PROJECT_NAME} -w ${WEB_GUNICORN_WORKER} --bind :8000 ${WEB_PROJECT_NAME}.wsgi:application'
    #     networks:
    #         - pc_network
    webserver:
        image: nginx:1
        ports:
            - ${WEBSERVER_PORT}:8000
            - 443:443
        volumes:
            - './container/nginx/nginx.conf:/etc/nginx/nginx.conf'
            - './container/nginx/default.conf:/etc/nginx/conf.d/default.conf'
            - './container/nginx/ssl_conf/:/etc/letsencrypt'
            - './container/nginx/ssl_data/:/var/www/certbot'
            - './log:/var/log/nginx/'
            # - './app_web/template/static/:/app_web/static/'
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        networks:
            - pc_network
    # certbot:
    #     image: certbot/certbot
    #     volumes:
    #         - './container/nginx/ssl_conf/:/etc/letsencrypt'
    #         - './container/nginx/ssl_data/:/var/www/certbot'
    #     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    #     networks:
    #         - pc_network
networks:
    pc_network:
        driver: bridge